<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>JBoss EAP 7.3 brings new packaging capabilities</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CM9wtkBkf5E/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="galleon" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss EAP 7.3" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="runtimes" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-jboss_eap_7_3_brings_new_packaging_capabilities</id><updated>2020-04-10T07:00:52Z</updated><published>2020-04-10T07:00:52Z</published><content type="html">&lt;p&gt;In addition to a huge set of &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/7.3.0_release_notes/index#new_features_and_enhancements" target="_blank" rel="noopener noreferrer"&gt;new features and improvements&lt;/a&gt;, the &lt;a href="https://www.redhat.com/en/blog/announcing-availability-red-hat-jboss-enterprise-application-platform-73" target="_blank" rel="noopener noreferrer"&gt;release of Red Hat JBoss Enterprise Application Platform 7.3&lt;/a&gt; provides innovative packaging capabilities. In this article, I will highlight two of these new capabilities and demonstrate their benefits: splitting images into build versus runtimes, and configuration trimming with &lt;a href="https://docs.wildfly.org/galleon/" target="_blank" rel="noopener noreferrer"&gt;Galleon&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Separating build versus runtime images&lt;/h2&gt; &lt;p&gt;The traditional containerization of JBoss EAP images consists of running an &lt;a href="https://docs.openshift.com/container-platform/latest/builds/understanding-image-builds.html#build-strategy-s2i_understanding-image-builds" target="_blank" rel="noopener noreferrer"&gt;S2I build&lt;/a&gt;, which combines a base JBoss EAP image (containing everything in EAP) with the application build. This old way of doing things results in a final image that has a &lt;em&gt;lot&lt;/em&gt; of unnecessary stuff in it, such as build tools like Maven and S2I tooling.&lt;/p&gt; &lt;p&gt;In JBoss EAP 7.3, there are new, slimmed-down runtime images that can be built in a pipeline as a chained build so that the final image is much smaller and doesn&amp;#8217;t contain all of the tooling needed at build time. This behavior offers a smaller image size and saves costs for network bandwidth and storage.&lt;/p&gt; &lt;h2&gt;Trimming with Galleon&lt;/h2&gt; &lt;p&gt;You can now customize the main JBoss EAP for OpenShift image configuration to include &lt;em&gt;only&lt;/em&gt; the capabilities that you require, thereby reducing the memory footprint and startup times. The provisioning tool, &lt;a href="https://docs.wildfly.org/galleon/" target="_blank" rel="noopener noreferrer"&gt;Galleon&lt;/a&gt;, offers several layers that you can select to control the capabilities present in the JBoss EAP server. This server contains several &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html/getting_started_with_jboss_eap_for_openshift_container_platform/capability-trimming-eap-foropenshift_default" target="_blank" rel="noopener noreferrer"&gt;supported and pre-defined Galleon layers&lt;/a&gt;, and developers and operations teams can create custom layers they can use to add small parts of functionality in a repeatable way.&lt;/p&gt; &lt;p&gt;These two features provide many benefits, which are outlined in the demo video. Check it out, and be sure to try JBoss EAP 7.3 and discover many other awesome new features and improvements!&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/UvLh5G8prT0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#38;linkname=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fjboss-eap-7-3-brings-new-packaging-capabilities%2F&amp;#038;title=JBoss%20EAP%207.3%20brings%20new%20packaging%20capabilities" data-a2a-url="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/" data-a2a-title="JBoss EAP 7.3 brings new packaging capabilities"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/"&gt;JBoss EAP 7.3 brings new packaging capabilities&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CM9wtkBkf5E" height="1" width="1" alt=""/&gt;</content><summary>In addition to a huge set of new features and improvements, the release of Red Hat JBoss Enterprise Application Platform 7.3 provides innovative packaging capabilities. In this article, I will highlight two of these new capabilities and demonstrate their benefits: splitting images into build versus runtimes, and configuration trimming with Galleon. Separating build versus runtime images The tradit...</summary><dc:creator>James Falkner</dc:creator><dc:date>2020-04-10T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/10/jboss-eap-7-3-brings-new-packaging-capabilities/</feedburner:origLink></entry><entry><title>Migrating a Spring Boot microservices application to Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/howNm7-UqSg/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes-native" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><author><name>chgan</name></author><id>searchisko:content:id:jbossorg_blog-migrating_a_spring_boot_microservices_application_to_quarkus</id><updated>2020-04-10T07:00:50Z</updated><published>2020-04-10T07:00:50Z</published><content type="html">&lt;p&gt;While &lt;a href="https://developers.redhat.com/topics/spring-boot/" rel="noopener noreferrer"&gt;Spring Boot&lt;/a&gt; has long been the de-facto framework for developing container-based applications in Java, the performance benefits of a Kubernetes-native framework are hard to ignore. In this article, I will show you how to quickly migrate a Spring Boot microservices application to &lt;a href="https://developers.redhat.com/topics/quarkus/" rel="noopener noreferrer"&gt;Quarkus&lt;/a&gt;. Once the migration is complete, we&amp;#8217;ll test the application and compare startup times between the original Spring Boot application and the new Quarkus app.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span id="more-694017"&gt;&lt;/span&gt;&lt;br /&gt; &lt;strong&gt;Note&lt;/strong&gt;: For developers interested in migrating from Spring Boot to Quarkus, it&amp;#8217;s important to know that Quarkus does not support all of Spring Boot&amp;#8217;s extensions and features. As one example, it only supports a subset of the Java EE &lt;a href="https://quarkus.io/guides/cdi-reference" target="_blank" rel="noopener noreferrer"&gt;Contexts and Dependency Injection (CDI) API&lt;/a&gt;. Migrating microservices or container-based applications to Quarkus will be easier than migrating monolithic ones.&lt;/p&gt; &lt;h2&gt;About Quarkus&lt;/h2&gt; &lt;p&gt;Quarkus is a &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/" rel="noopener noreferrer"&gt;Kubernetes-native Java framework&lt;/a&gt; tailored for Java virtual machines (JVMs) such as GraalVM and HotSpot. Being &lt;em&gt;Kubernetes-native&lt;/em&gt; means that Quarkus takes a &lt;a href="https://quarkus.io/vision/container-first" target="_blank" rel="noopener noreferrer"&gt;container-first approach&lt;/a&gt; to Java application development. The smaller footprint inherent in container-first development makes Quarkus one of the best options for running Java applications on Kubernetes and serverless platforms today.&lt;/p&gt; &lt;h2&gt;The Spring Boot application&lt;/h2&gt; &lt;p&gt;For our example application, we&amp;#8217;ll use the &lt;code&gt;AccountBalance&lt;/code&gt; microservices application from my previous article, &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2019/11/21/event-based-microservices-with-red-hat-amq-streams/" rel="noopener noreferrer"&gt;Event-based microservices with Red Hat AMQ Streams&lt;/a&gt;&lt;/em&gt;. The &lt;code&gt;AccountBalance&lt;/code&gt; service has its own MongoDB database, which holds account-balance information. The database is also called by other services, such as the &lt;code&gt;EventCorrelator&lt;/code&gt; service.&lt;/p&gt; &lt;p&gt;You can find the source code for the example application on &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;. I&amp;#8217;ll guide you through each step of migrating this application from Spring Boot to Quarkus.&lt;/p&gt; &lt;p&gt;The following shows the content of the sample source code. This is typical standard Java project file structure. mvnw is Maven wrapper plugin that we &lt;a href="https://www.baeldung.com/maven-wrapper" target="_blank" rel="noopener noreferrer"&gt;generated&lt;/a&gt;. We will need to modify the pom.xml and the source codes under the src/main.&lt;/p&gt; &lt;div id="attachment_705127" style="width: 244px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-705127" class=" wp-image-705127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png" alt="Sample Codes Content" width="234" height="353" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure.png 398w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Quarkus-Codes-Structure-199x300.png 199w" sizes="(max-width: 234px) 100vw, 234px" /&gt;&lt;p id="caption-attachment-705127" class="wp-caption-text"&gt;Sample Codes Content&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Step 1: Modify the pom.xml for your application&lt;/h3&gt; &lt;p&gt;The simplest way to migrate from Spring Boot to Quarkus is to &lt;a href="https://quarkus.io/guides/getting-started#bootstrapping-the-project" target="_blank" rel="noopener noreferrer"&gt;bootstrap a sample Quarkus application&lt;/a&gt; and use that application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; as a template for modifying the same file in your Spring Boot application.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: In addition to the example &lt;code&gt;pom.xml&lt;/code&gt;, the Quarkus team provides a &lt;a href="https://code.quarkus.io/" target="_blank" rel="noopener noreferrer"&gt;web-based user interface (UI)&lt;/a&gt; that you can use for migration. I won&amp;#8217;t demonstrate using the web UI in this article.&lt;/p&gt; &lt;p&gt;Take a minute to set up your terminal and project, as described in the &lt;a href="https://quarkus.io/guides/getting-started#bootstrapping-the-project" target="_blank" rel="noopener noreferrer"&gt;bootstrapping instructions&lt;/a&gt;. Once you have your project set up, we can begin modifying the Spring Boot &lt;code&gt;pom.xml&lt;/code&gt;. We&amp;#8217;ll start by removing Spring Boot configurations we no longer need, then we&amp;#8217;ll replace those elements with the corresponding &lt;a href="https://quarkus.io/guides/config" target="_blank" rel="noopener noreferrer"&gt;configurations for a Quarkus app&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Remove the Spring Boot configurations&lt;/h4&gt; &lt;p&gt;First, we remove the packing configuration from the example application&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt;. This no longer needed because it is taken care by the &lt;code&gt;&amp;#60;build&amp;#62;&lt;/code&gt; part in the &lt;code&gt;pom.xml&lt;/code&gt; configuration.&lt;/p&gt; &lt;pre&gt;&amp;#60;!--- Remove the packing configuration --&amp;#62; &amp;#60;packaging&amp;#62;jar&amp;#60;/packaging&amp;#62; &lt;/pre&gt; &lt;p&gt;&lt;code&gt;spring-boot-starter-parent&lt;/code&gt; is for Spring Boot application which is no longer needed here.&lt;/p&gt; &lt;pre&gt;&amp;#60;!--- Remove spring-boot-starter-parent --&amp;#62; &amp;#60;parent&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-parent&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;1.4.2.RELEASE&amp;#60;/version&amp;#62; &amp;#60;/parent&amp;#62; &lt;/pre&gt; &lt;p&gt;same goes to &lt;code&gt;spring-cloud-dependencies&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove the following from the &amp;#60;dependencyManagement&amp;#62; --&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.cloud&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-cloud-dependencies&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;Brixton.SR4&amp;#60;/version&amp;#62; &lt;/pre&gt; &lt;p&gt;Now, we can remove all of the remaining Spring Boot dependencies:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove all Spring Boot-related dependencies --&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-data-mongodb&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-web&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.data&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-data-commons&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-starter-websocket&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-messaging&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.cloud&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-cloud-context&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.ws.rs&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;javax.ws.rs-api&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.0.1&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.apache.maven&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;maven-model&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.3.9&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-api&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;com.sun.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;com.sun.xml.bind&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaxb-impl&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;2.2.11&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;javax.activation&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;activation&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;1.1.1&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;We can also take out the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt; in the build section:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Remove the spring-boot-maven plugin from the build section --&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.springframework.boot&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;spring-boot-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;/plugin&amp;#62; &lt;/pre&gt; &lt;h4&gt;Add Quarkus elements to the pom.xml&lt;/h4&gt; &lt;p&gt;Next, we&amp;#8217;ll copy the properties and dependencies from the bootstrapped Quarkus &lt;code&gt;pom.xml&lt;/code&gt; and paste them in at the top of the &lt;code&gt;pom.xml&lt;/code&gt; for our example application. This section is important to tell the compiler which version of components that we want to use for our Quarkus. Quarkus release is moving fast, you may want to check the latest version for &lt;code&gt;&amp;#60;quarkus.platform.version&amp;#62; &lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Place this at the top of the pom.xml --&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;compiler-plugin.version&amp;#62;3.8.1&amp;#60;/compiler-plugin.version&amp;#62; &amp;#60;maven.compiler.parameters&amp;#62;true&amp;#60;/maven.compiler.parameters&amp;#62; &amp;#60;maven.compiler.source&amp;#62;1.8&amp;#60;/maven.compiler.source&amp;#62; &amp;#60;maven.compiler.target&amp;#62;1.8&amp;#60;/maven.compiler.target&amp;#62; &amp;#60;project.build.sourceEncoding&amp;#62;UTF-8&amp;#60;/project.build.sourceEncoding&amp;#62; &amp;#60;project.reporting.outputEncoding&amp;#62;UTF-8&amp;#60;/project.reporting.outputEncoding&amp;#62; &amp;#60;quarkus-plugin.version&amp;#62;1.2.1.Final&amp;#60;/quarkus-plugin.version&amp;#62; &amp;#60;quarkus.platform.artifact-id&amp;#62;quarkus-universe-bom&amp;#60;/quarkus.platform.artifact-id&amp;#62; &amp;#60;quarkus.platform.group-id&amp;#62;io.quarkus&amp;#60;/quarkus.platform.group-id&amp;#62; &amp;#60;quarkus.platform.version&amp;#62;1.2.1.Final&amp;#60;/quarkus.platform.version&amp;#62; &amp;#60;surefire-plugin.version&amp;#62;2.22.1&amp;#60;/surefire-plugin.version&amp;#62; &amp;#60;/properties&amp;#62; &lt;/pre&gt; &lt;p&gt;Add this under &lt;code&gt;dependencyManagement&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add this under dependencyManagement --&amp;#62; &amp;#60;dependencyManagement&amp;#62; &amp;#60;dependencies&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;${quarkus.platform.group-id}&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;${quarkus.platform.artifact-id}&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${quarkus.platform.version}&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;/dependencies&amp;#62; &amp;#60;/dependencyManagement&amp;#62; &lt;/pre&gt; &lt;p&gt;Now we can copy the Quarkus dependencies from the bootstrap file and paste them into the &lt;code&gt;pom.xml&lt;/code&gt;. Note that in the code below, I also manually added the &lt;a href="https://quarkus.io/guides/mongodb-panache" target="_blank" rel="noopener noreferrer"&gt;MongoDB Panache&lt;/a&gt; dependency, which the example application requires. I added this dependency manually because I did not use the web UI to bootstrap it in earlier. Note, also, that &lt;code&gt;AccountBalance&lt;/code&gt; uses a repository to connect to and query the MongoDB database. The Panache extension allows us to migrate the existing code with minimal changes. (You can find the &lt;a href="https://github.com/quarkusio/quarkus/blob/master/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java" target="_blank" rel="noopener noreferrer"&gt;source code for Panache&lt;/a&gt; on GitHub.)&lt;/p&gt; &lt;p&gt;Start by adding these dependencies to the &lt;code&gt;pom.xml:&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;!-- notice this app is using jsonb --&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-resteasy-jsonb&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-junit5&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.rest-assured&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;rest-assured&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;test&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-mongodb-panache&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;Add the &lt;code&gt;quarkus-maven-plugin&lt;/code&gt; under the build configuration:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add the following plugin under the build configuration --&amp;#62; &amp;#60;build&amp;#62; &amp;#60;finalName&amp;#62;${project.artifactId}-${project.version}&amp;#60;/finalName&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${quarkus-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-compiler-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${compiler-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-surefire-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${surefire-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;systemProperties&amp;#62; &amp;#60;java.util.logging.manager&amp;#62;org.jboss.logmanager.LogManager&amp;#60;/java.util.logging.manager&amp;#62; &amp;#60;/systemProperties&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &lt;/pre&gt; &lt;p&gt;Finally, add the profiles settings:&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- Add the following profiles settings --&amp;#62; &amp;#60;profiles&amp;#62; &amp;#60;profile&amp;#62; &amp;#60;id&amp;#62;native&amp;#60;/id&amp;#62; &amp;#60;activation&amp;#62; &amp;#60;property&amp;#62; &amp;#60;name&amp;#62;native&amp;#60;/name&amp;#62; &amp;#60;/property&amp;#62; &amp;#60;/activation&amp;#62; &amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;artifactId&amp;#62;maven-failsafe-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${surefire-plugin.version}&amp;#60;/version&amp;#62; &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;integration-test&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;verify&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;configuration&amp;#62; &amp;#60;systemProperties&amp;#62; &amp;#60;native.image.path&amp;#62;${project.build.directory}/${project.build.finalName}-runner&amp;#60;/native.image.path&amp;#62; &amp;#60;/systemProperties&amp;#62; &amp;#60;/configuration&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; &amp;#60;/build&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;quarkus.package.type&amp;#62;native&amp;#60;/quarkus.package.type&amp;#62; &amp;#60;/properties&amp;#62; &amp;#60;/profile&amp;#62; &amp;#60;/profiles&amp;#62; &lt;/pre&gt; &lt;h3&gt;Step 2: Migrate the Spring Boot application code&lt;/h3&gt; &lt;p&gt;The Maven POM is all set. We&amp;#8217;re now ready to migrate the Spring Boot application code to Quarkus.&lt;/p&gt; &lt;p&gt;First, remove the &lt;code&gt;Application.java&lt;/code&gt; class. We don&amp;#8217;t need it anymore. You can also modify the &lt;code&gt;application.properties&lt;/code&gt; for the application port and the &lt;a href="https://quarkus.io/guides/mongodb#configuration-reference" target="_blank" rel="noopener noreferrer"&gt;MongoDB client properties&lt;/a&gt; files, as shown here:&lt;/p&gt; &lt;pre&gt;### --- Remove the Spring Boot properties # spring.application.name=accountbalance-service # spring.data.mongodb.host=localhost # spring.data.mongodb.port=27017 # spring.data.mongodb.username=checkbalance # spring.data.mongodb.password=checkbalance # spring.data.mongodb.database=checkbalance # server.port=8082 ### --- Replace with equivalent Quarkus MongoDB properties quarkus.mongodb.connection-string=mongodb://checkbalance:checkbalance@localhost:27017/checkbalance # --- Note the wrong context of database name ... planning and design before coding is so important. quarkus.mongodb.database=checkbalance quarkus.http.port=8082 &lt;/pre&gt; &lt;h4&gt;The entity bean code&lt;/h4&gt; &lt;p&gt;Next, we&amp;#8217;ll change the entity bean code in &lt;code&gt;Balance.java&lt;/code&gt;. To start, remove the Spring Boot-related import statements. We are going to replace these with Quarkus equivalent components in the next section.&lt;/p&gt; &lt;pre&gt;/// --- Remove the Spring Boot-related import statements import org.bson.types.ObjectId; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; &lt;/pre&gt; &lt;p&gt;Add the equivalent import statements for Quarkus. Quarkus framework provides its own supported components for MongoDB via the MongoDB Panache extension. Quarkus also provides its own version of CDI annotation. This where we provide the correct import statements for those.&lt;/p&gt; &lt;pre&gt;/// --- Add the following Quarkus-related import statements import io.quarkus.mongodb.panache.MongoEntity; import io.quarkus.mongodb.panache.PanacheMongoEntity; import org.bson.codecs.pojo.annotations.BsonProperty; import org.bson.codecs.pojo.annotations.BsonId; import io.quarkus.mongodb.panache.PanacheQuery; &lt;/pre&gt; &lt;p&gt;Replace the existing &lt;code&gt;@Document&lt;/code&gt; annotation with &lt;code&gt;@MongoEntity&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;/// --- Replace @Document annotation with @MongoEntity // --- @Document(collection = "balance") &amp;#60;--- Remove this @MongoEntity(collection="balance") public class Balance extends PanacheMongoEntity{ /// --- More codes here are omitted ... ...&lt;/pre&gt; &lt;p&gt;Replace Spring Boot&amp;#8217;s &lt;code&gt;@Id&lt;/code&gt; annotation with Quarkus&amp;#8217;s &lt;code&gt;@BsonId&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;/// --- Replace @Id annotation with @BsonId // @Id &amp;#60;--- Remove this @BsonId //In fact, we do not need this. Just leave it here for now. private String _id; &lt;/pre&gt; &lt;h3&gt;The repository class&lt;/h3&gt; &lt;p&gt;We also need to modify the Spring Boot repository class, &lt;code&gt;BalanceRepository.java&lt;/code&gt;. To start, remove the following import statement:&lt;/p&gt; &lt;pre&gt;/// --- Remove the following import statement import org.springframework.data.mongodb.repository.MongoRepository; &lt;/pre&gt; &lt;p&gt;Replace it with this one:&lt;/p&gt; &lt;pre&gt;/// --- Add the following import statements import io.quarkus.mongodb.panache.PanacheMongoRepository; import javax.enterprise.context.ApplicationScoped; import io.quarkus.mongodb.panache.PanacheQuery; &lt;/pre&gt; &lt;p&gt;Then make three more quick changes:&lt;/p&gt; &lt;pre&gt;/// --- Change the BalanceRepository to implement PanacheMongoRepository // --- Change the BalanceRepository from interface to class // --- Drop in the @ApplicationScoped annotation @ApplicationScoped public class BalanceRepository implements PanacheMongoRepository&amp;#60;Balance&amp;#62; { // --- Change the findByAccountId(String accountId) to the following implementation public Balance findByAccountId(String accountId){ return find("accountId", accountId).firstResult(); } } &lt;/pre&gt; &lt;h4&gt;The REST class&lt;/h4&gt; &lt;p&gt;We&amp;#8217;ll also modify &lt;code&gt;AccountBalance.java&lt;/code&gt;. Start by removing all of the Spring Boot-related import statements:&lt;/p&gt; &lt;pre&gt;/// --- Remove all the Spring Boot-related import statements import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; import org.springframework.core.env.Environment; import org.springframework.data.domain.Example; import org.springframework.data.repository.Repository; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.beans.factory.annotation.Autowired; &lt;/pre&gt; &lt;p&gt;Add the following import statements for Quarkus. (We&amp;#8217;re not using all of these imports in the &lt;code&gt;.java&lt;/code&gt; files, but we can leave them for now.)&lt;/p&gt; &lt;pre&gt;/// --- Add the following import statements. import javax.ws.rs.Consumes; import javax.ws.rs.DELETE; import javax.ws.rs.GET; import javax.ws.rs.POST; import javax.ws.rs.PUT; import javax.ws.rs.Path; import javax.ws.rs.PathParam; import javax.ws.rs.Produces; import javax.ws.rs.core.Response; import javax.ws.rs.core.MediaType; import javax.inject.Inject; &lt;/pre&gt; &lt;p&gt;Remove the Spring Boot &lt;code&gt;@RequestMapping&lt;/code&gt; and &lt;code&gt;@RestController&lt;/code&gt; annotations:&lt;/p&gt; &lt;pre&gt;/// --- Remove the @RequestMapping and @RestController and update as follows // @RequestMapping("/ws/pg")      &amp;#60;--- Remove this // @RestController      &amp;#60;--- Remove this @Path("/ws/pg") // &amp;#60;---- Add this @Produces(MediaType.APPLICATION_JSON) // &amp;#60;---- Add this @Consumes(MediaType.APPLICATION_JSON) // &amp;#60;---- Add this public class AccountBalance{ /// --- I have omitted more code here ... &lt;/pre&gt; &lt;p&gt;You will also need to remove the &lt;code&gt;@Autowire&lt;/code&gt; and &lt;code&gt;@Inject&lt;/code&gt; annotations:&lt;/p&gt; &lt;pre&gt;/// --- Remove @Autowire with @Inject // @Autowired      &amp;#60;--- Remove this @Inject private BalanceRepository repository; &lt;/pre&gt; &lt;p&gt;Note that we changed the &lt;code&gt;@RequestMapping&lt;/code&gt; annotation to &lt;code&gt;@Path&lt;/code&gt;, and we also removed &lt;code&gt;@ResponseBody&lt;/code&gt;. As our last step, we need to change the &lt;code&gt;@PathVariable&lt;/code&gt; to &lt;code&gt;@PathParam&lt;/code&gt;, as shown below. (While not shown, we would apply similar changes to all the other methods in this Java class. See the &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" rel="noopener noreferrer"&gt;example application&amp;#8217;s source code&lt;/a&gt; to review all of the changes):&lt;/p&gt; &lt;pre&gt;@Path("/balance/{accountid}") @GET public Balance get(@PathParam("accountid") String accountId) { Balanceresult = repository.findByAccountId(accountId); return result; } &lt;/pre&gt; &lt;p&gt;That completes the migration, although I left out some steps to keep this exercise brief. As an example, the &lt;code&gt;AccountBalance&lt;/code&gt; application is meant to be deployed onto &lt;a href="https://www.openshift.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift&lt;/a&gt;, so I modified the &lt;code&gt;Heathz.java&lt;/code&gt; file for that. You can view those changes in the application source.&lt;/p&gt; &lt;h3&gt;Step 3: Test the Quarkus application&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll test our new application. Figure 1 shows the Spring Boot execution before migration.&lt;/p&gt; &lt;div id="attachment_694497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694497" class=" wp-image-694497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png" alt="A screenshot showing the Spring Boot start time at command prompt." width="640" height="56" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-1024x90.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-300x26.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM-768x67.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.07.33-AM.png 1528w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694497" class="wp-caption-text"&gt;Figure 1. The Spring Boot app starts within 3.166 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s see how the Quarkus application&amp;#8217;s startup compares to Spring Boot. From the command prompt, switch over to the &lt;code&gt;AccountBalance&lt;/code&gt; directory. Execute the following command to run the migrated application:&lt;/p&gt; &lt;pre&gt;mvn quarkus:dev &lt;/pre&gt; &lt;p&gt;Note that the first time you run the application, it can take longer than it will on subsequent runs. Maven needs additional time to download the Quarkus repositories to your local machine. Figure 2 shows the start time for the new Quarkus application.&lt;/p&gt; &lt;div id="attachment_694537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694537" class=" wp-image-694537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png" alt="A screenshot of the Quarkus application's start time on first execution." width="640" height="57" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-1024x91.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-300x27.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.14.18-AM-768x68.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694537" class="wp-caption-text"&gt;Figure 2. Quarkus starts within 1.540 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That&amp;#8217;s an improvement. Now let&amp;#8217;s do a &lt;a href="https://quarkus.io/guides/building-native-image" target="_blank" rel="noopener noreferrer"&gt;Quarkus-native build&lt;/a&gt;. Remember to execute the native build from the project&amp;#8217;s &lt;code&gt;root&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;/mvnw package -Pnative &lt;/pre&gt; &lt;p&gt;The output in Figure 3 indicates a successful Quarkus-native build.&lt;/p&gt; &lt;div id="attachment_694547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694547" class=" wp-image-694547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png" alt="A screenshot indicating theQuarkus-native build completed sucessfully." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM-768x246.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.20.18-AM.png 1272w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694547" class="wp-caption-text"&gt;Figure 3. The Quarkus-native build completes successfully.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Enter the following to run the native binary:&lt;/p&gt; &lt;pre&gt;./target/account-service-1.0.0-runner &lt;/pre&gt; &lt;p&gt;Figure 4 shows the execution time for the Quarkus-native build.&lt;/p&gt; &lt;div id="attachment_694557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694557" class=" wp-image-694557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png" alt="A screenshot of the execution time for the Quarkus native build." width="640" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-1024x97.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-300x29.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.22.49-AM-768x73.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694557" class="wp-caption-text"&gt;Figure 4. The Quarkus-native build starts within 0.071 seconds.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, I created a simple UI to call the &lt;code&gt;AccountBalance&lt;/code&gt; service and display an account balance. As shown in Figure 5, the migrated application works as expected.&lt;/p&gt; &lt;div id="attachment_694567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-694567" class=" wp-image-694567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png" alt="An account balance is displayed in the AccountBalance app's UI." width="640" height="253" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-1024x404.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM-768x303.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screenshot-2020-03-11-at-10.18.06-AM.png 1332w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-694567" class="wp-caption-text"&gt;Figure 5. The AccountBalance application works as it should.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The migration from Spring Boot to Quarkus was a success.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Migrating the example application from Spring Boot to Quarkus was a pretty straightforward exercise. For a more complicated application, the migration path would be more complex. The biggest challenge with migrating my microservices application from Spring Boot to Quarkus was determining which annotations and libraries to use. The documentation for Quarkus provides good examples but omits import statements. Many IDEs will handle those configuration details for you, but I chose to migrate manually.&lt;/p&gt; &lt;p&gt;I hope this article serves as a starting point for migrating your Java applications from Spring Boot to Quarkus. If you want to take what you&amp;#8217;ve learned to the next level, you could &lt;a href="https://quarkus.io/guides/building-native-image#creating-a-container" target="_blank" rel="noopener noreferrer"&gt;follow these steps to containerize your application&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;p&gt;Check out the following resources to learn more:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Find the complete &lt;a href="https://github.com/chengkuangan/AccountBalance-Quarkus-Sample" target="_blank" rel="noopener noreferrer"&gt;source code for the example application&lt;/a&gt; on GitHub.&lt;/li&gt; &lt;li&gt;See the &lt;a href="https://quarkus.io/guides/config" target="_blank" rel="noopener noreferrer"&gt;Quarkus Configuration Guide&lt;/a&gt; to learn how to configure your application using the Quarkus &lt;code&gt;ConfigProperty&lt;/code&gt;, &lt;code&gt;application.properties&lt;/code&gt;, and so on.&lt;/li&gt; &lt;li&gt;Learn more about the &lt;a href="https://quarkus.io/guides/mongodb-panache" target="_blank" rel="noopener noreferrer"&gt;MongoDB Panache extension&lt;/a&gt;. Also, see the &lt;a href="https://github.com/quarkusio/quarkus/blob/master/extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoRepositoryBase.java" target="_blank" rel="noopener noreferrer"&gt;PanacheMongoRepositoryBase&lt;/a&gt; repository on GitHub—reading source code is what developers do right!&lt;/li&gt; &lt;li&gt;Get more information about &lt;a href="https://quarkus.io/guides/building-native-image" target="_blank" rel="noopener noreferrer"&gt;building a native Quarkus executable&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#38;linkname=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F10%2Fmigrating-a-spring-boot-microservices-application-to-quarkus%2F&amp;#038;title=Migrating%20a%20Spring%20Boot%20microservices%20application%20to%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/" data-a2a-title="Migrating a Spring Boot microservices application to Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/"&gt;Migrating a Spring Boot microservices application to Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/howNm7-UqSg" height="1" width="1" alt=""/&gt;</content><summary>While Spring Boot has long been the de-facto framework for developing container-based applications in Java, the performance benefits of a Kubernetes-native framework are hard to ignore. In this article, I will show you how to quickly migrate a Spring Boot microservices application to Quarkus. Once the migration is complete, we’ll test the application and compare startup times between the original ...</summary><dc:creator>chgan</dc:creator><dc:date>2020-04-10T07:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus/</feedburner:origLink></entry><entry><title>Deploying projects to Apache Felix, Tomcat, and Karaf in VS Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YZN-JSjEV-8/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jakarta ee" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="minishift" scheme="searchisko:content:tags" /><category term="OSGi" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>Rob Stryker</name></author><id>searchisko:content:id:jbossorg_blog-deploying_projects_to_apache_felix_tomcat_and_karaf_in_vs_code</id><updated>2020-04-09T07:00:58Z</updated><published>2020-04-09T07:00:58Z</published><content type="html">&lt;p&gt;We&amp;#8217;re expanding tooling support for containers and servers in different development environments. Our existing VS Code extension, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-server-connector" target="_blank" rel="noopener noreferrer"&gt;Red Hat Server Connector&lt;/a&gt;, only provides functionality for Red Hat servers and runtimes like &lt;a href="https://wildfly.org/" target="_blank" rel="noopener noreferrer"&gt;WildFly&lt;/a&gt;, &lt;a href="https://www.okd.io/minishift/" target="_blank" rel="noopener noreferrer"&gt;Minishift&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/eap/overview" target="_blank" rel="noopener noreferrer"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP), and &lt;a href="https://developers.redhat.com/products/cdk/overview" target="_blank" rel="noopener noreferrer"&gt;Red Hat Container Development Kit&lt;/a&gt;. In this article, we introduce &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector"&gt;Red Hat Community Server Connector&lt;/a&gt;, the newest addition to our &lt;a href="https://developers.redhat.com/products/vscode-extensions/overview" target="_blank" rel="noopener noreferrer"&gt;Visual Studio Code (VS Code) extensions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Community Server Connector makes it easier than ever to deploy, run, debug, and test Open Service Gateway initiative (OSGi), Java EE and Jakarta EE, and other projects targeting diverse servers and runtimes. This new VS Code extension allows you to control Apache Felix, Apache Karaf, and Apache Tomcat with the same user interface (UI) and flexibility that you have in Server Connector. And don&amp;#8217;t worry, we&amp;#8217;ll continue to enhance Red Hat Server Connector as well.&lt;/p&gt; &lt;p&gt;This article offers a general introduction to Red Hat Server Connector. For a more detailed introduction, see my &lt;a href="https://youtu.be/8JIcEzoPhlE" target="_blank" rel="noopener noreferrer"&gt;video demonstration&lt;/a&gt;, which includes use cases for Apache Felix, Apache Karaf, and Apache Tomcat.&lt;/p&gt; &lt;p&gt;&lt;span id="more-694287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/6lBmlxe9uDs" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;General features&lt;/h2&gt; &lt;p&gt;Server Connector and Community Server Connector share a common UI, which is provided by the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-rsp-ui" target="_blank" rel="noopener noreferrer"&gt;Remote Server Protocol (RSP) UI extension&lt;/a&gt;. Installing either server connector automatically pulls in this dependency. The server connector extensions can start and stop an RSP server. Much like a Language Server Protocol (LSP) instance, RSPs let you perform everyday tasks when working with servers or runtimes.&lt;/p&gt; &lt;p&gt;The Remote Server Protocol provides support for the following main tasks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Locate a server runtime on disk and configure it for use.&lt;/li&gt; &lt;li&gt;Download a server runtime to disk and configure it for use.&lt;/li&gt; &lt;li&gt;Start a server in normal or debug mode. (Only servers written in Java can be debugged at this time.)&lt;/li&gt; &lt;li&gt;Stop a server.&lt;/li&gt; &lt;li&gt;Add a deployment to a server, deploy it, un-deploy it, and so on.&lt;/li&gt; &lt;li&gt;Run arbitrary actions exposed by the server type.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Support for Apache runtimes&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll look at Red Hat Community Server Connector&amp;#8217;s support for three Apache runtimes: Apache Felix, Apache Karaf, and Apache Tomcat.&lt;/p&gt; &lt;h3&gt;Apache Felix&lt;/h3&gt; &lt;p&gt;Community Server Connector supports &lt;a href="https://felix.apache.org" target="_blank" rel="noopener noreferrer"&gt;Apache Felix&lt;/a&gt; versions 3.2, 4.6, 5.6, and 6.0. Apache Felix isn&amp;#8217;t as full-featured as some other containers or web servers, so our tooling is necessarily limited. When Apache Felix starts via the command line, it typically dumps you right into a shell. Unfortunately, our extension does not launch the start command for the server; an &lt;code&gt;rsp-server&lt;/code&gt; in the background executes the start and forwards output to our VS Code extension. As a result, there&amp;#8217;s no good way to allow users to interact with the OSGi shell.&lt;/p&gt; &lt;p&gt;We still allow you to publish deployments to the OSGi &lt;code&gt;bundle/&lt;/code&gt; folder via the UI, but the container won&amp;#8217;t reload the changes until you restart. To make up for this, the Apache Felix server adapters contain an action to stop the server, wipe the &lt;code&gt;felix-cache&lt;/code&gt; folder, and start the container again. See the &lt;a href="https://youtu.be/8JIcEzoPhlE" target="_blank" rel="noopener noreferrer"&gt;Red Hat Community Server Connector video demo&lt;/a&gt; for more about this functionality.&lt;/p&gt; &lt;h3&gt;Apache Karaf&lt;/h3&gt; &lt;p&gt;Red Hat Community Server Connector supports &lt;a href="https://karaf.apache.org" target="_blank" rel="noopener noreferrer"&gt;Apache Karaf&lt;/a&gt; version 4.8. When started, Apache Karaf (like Apache Felix) automatically launches you into a shell. In this shell, you can install features, control OSGi bundles, and more. As with Apache Felix, we cannot provide user interaction within the shell upon startup. Apache Karaf is significantly more full-featured than Apache Felix, however. Once startup is complete, a user action connects to Apache Karaf&amp;#8217;s shell via SSH in the terminal inside VS Code, which gives you more flexibility for adding or removing features, controlling deployments, and modifying configurations.&lt;/p&gt; &lt;p&gt;The video demo shows a pair of interesting use cases for Apache Karaf. The first involves deploying and controlling a simple OSGi bundle. The second shows you how to configure the tooling required to implement routes in Apache Camel.&lt;/p&gt; &lt;h3&gt;Apache Tomcat&lt;/h3&gt; &lt;p&gt;The final supported runtime is &lt;a href="http://tomcat.apache.org" target="_blank" rel="noopener noreferrer"&gt;Apache Tomcat&lt;/a&gt;, with support for Tomcat versions 5.5, 6.0, 7.0, 8.0, and 8.5. The functionality here is fairly typical. You can start and stop the server in run or debug mode, and you also have options for exploded deployments and making incremental changes to static files like HTML or JavaServer Pages (JSP). The video demo shows both packaged (WAR) and exploded deployments for Apache Tomcat.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;If you are using Apache servers and runtimes on a daily basis, you might find &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector" target="_blank" rel="noopener noreferrer"&gt;Red Hat Community Server Connector&lt;/a&gt; a useful extension to have in your VS Code environment. &lt;a href="https://youtu.be/8JIcEzoPhlE" target="_blank" rel="noopener noreferrer"&gt;Watch the video demonstration&lt;/a&gt; for a complete introduction to our new VS Code extension and then go see what you can do with it.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#38;linkname=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fdeploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code%2F&amp;#038;title=Deploying%20projects%20to%20Apache%20Felix%2C%20Tomcat%2C%20and%20Karaf%20in%20VS%20Code" data-a2a-url="https://developers.redhat.com/blog/2020/04/09/deploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code/" data-a2a-title="Deploying projects to Apache Felix, Tomcat, and Karaf in VS Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/09/deploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code/"&gt;Deploying projects to Apache Felix, Tomcat, and Karaf in VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YZN-JSjEV-8" height="1" width="1" alt=""/&gt;</content><summary>We’re expanding tooling support for containers and servers in different development environments. Our existing VS Code extension, Red Hat Server Connector, only provides functionality for Red Hat servers and runtimes like WildFly, Minishift, Red Hat JBoss Enterprise Application Platform (JBoss EAP), and Red Hat Container Development Kit. In this article, we introduce Red Hat Community Server Conne...</summary><dc:creator>Rob Stryker</dc:creator><dc:date>2020-04-09T07:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/09/deploying-projects-to-apache-felix-tomcat-and-karaf-in-vs-code/</feedburner:origLink></entry><entry><title>Node.js update for Red Hat Runtimes brings improved support for native modules, diagnostic reporting, and more</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FyZXet3Rv7E/" /><category term="application deployment" scheme="searchisko:content:tags" /><category term="deploy app" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="red hat ubi" scheme="searchisko:content:tags" /><category term="RHEL 8.1" scheme="searchisko:content:tags" /><category term="runtimes" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Syed M Shaaf</name></author><id>searchisko:content:id:jbossorg_blog-node_js_update_for_red_hat_runtimes_brings_improved_support_for_native_modules_diagnostic_reporting_and_more</id><updated>2020-04-09T07:00:47Z</updated><published>2020-04-09T07:00:47Z</published><content type="html">&lt;p&gt;Developing applications on a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; distribution like &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;—or on Red Hat Enterprise Linux (RHEL), or by using our &lt;a href="https://developers.redhat.com/blog/category/ubi/"&gt;Universal Base Images&lt;/a&gt;—is easier with Red Hat&amp;#8217;s build of Node.js. The latest update of Red Hat Runtimes now includes Node.js 12.4.1, which provides a supported runtime for LTS releases. This new Red Hat build of Node.js together with the release of Red Hat Enterprise Linux 8.1 provides a number of new features and enhancements compared to Node.js 10.&lt;/p&gt; &lt;p&gt;This article focuses on these new features and enhancements.&lt;/p&gt; &lt;p&gt;&lt;span id="more-700717"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;New and changed features&lt;/h2&gt; &lt;p&gt;With the latest RHEL 8.1 and the Red Hat Build of Node.js 12, we now provide a number of new features and enhancements over version 10. Notable changes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Upgraded the V8 engine to version 7.4.&lt;/li&gt; &lt;li&gt;Added a new default HTTP parser, &lt;code&gt;llhttp&lt;/code&gt; (no longer experimental).&lt;/li&gt; &lt;li&gt;Integrated the capability to generate heap dumps.&lt;/li&gt; &lt;li&gt;Added support for ECMAScript 2015 (ES6) modules.&lt;/li&gt; &lt;li&gt;Improved support for native modules.&lt;/li&gt; &lt;li&gt;Removed the requirement for worker threads to have a flag.&lt;/li&gt; &lt;li&gt;Added a new experimental diagnostic report feature.&lt;/li&gt; &lt;li&gt;Improved performance.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For detailed changes in Node.js 12.14.1, see the &lt;a href="https://nodejs.org/en/blog/release/v12.14.1/" target="_blank" rel="noopener noreferrer"&gt;upstream release notes&lt;/a&gt; and &lt;a href="https://nodejs.org/dist/latest-v12.x/docs/api/" target="_blank" rel="noopener noreferrer"&gt;upstream documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Deploying the new build on OpenShift&lt;/h2&gt; &lt;p&gt;&lt;a href="https://www.npmjs.com/package/nodeshift" target="_blank" rel="noopener noreferrer"&gt;Nodeshift&lt;/a&gt; is an opinionated command-line application and programmable API that simplifies the deployment of NodeJS apps to OpenShift. To help with this process, Red Hat creates and maintains &lt;a href="https://cloud.docker.com/u/nodeshift/repository/docker/nodeshift/centos7-s2i-nodejs/tags" target="_blank" rel="noopener noreferrer"&gt;Source-to-Image(S2I) container images for Node.js&lt;/a&gt;. The blog &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2019/04/29/use-node-js-12-on-red-hat-openshift-today/"&gt;Use Node.js 12 on Red Hat OpenShift today&lt;/a&gt;&lt;/em&gt; explains how to deploy your Node.js projects to OpenShift using Nodeshift.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;The Runtimes team continuously adds to and improves the official documentation for Red Hat’s Node.js build. This work includes updates in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_node.js/12/html-single/release_notes_for_node.js_12/index" target="_blank" rel="noopener noreferrer"&gt;Release Notes&lt;/a&gt; and the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_node.js/12/html-single/node.js_runtime_guide/index" target="_blank" rel="noopener noreferrer"&gt;Node.js Runtime Guide&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Developer interactive learning scenarios&lt;/h2&gt; &lt;p&gt;These self-paced scenarios, such as Figure 1, provide you with a pre-configured OpenShift instance that is accessible from your browser without any downloads or configuration. Use this tool to &lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-nodejs/" target="_blank" rel="noopener noreferrer"&gt;experiment with Node.js&lt;/a&gt; or learn about other technologies within Runtimes, and see how Node.js on OpenShift helps solve real-world problems.&lt;/p&gt; &lt;div id="attachment_464877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-nodejs/"&gt;&lt;img aria-describedby="caption-attachment-464877" class="wp-image-464877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/katacoda-node-1024x604.png" alt="Node.js interactive learning scenario screenshot" width="640" height="378" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/katacoda-node-1024x604.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/katacoda-node-300x177.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/katacoda-node-768x453.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/katacoda-node.png 1180w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-464877" class="wp-caption-text"&gt;Figure 1: The Node.js interactive learning scenario.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Our goal has always been to provide rapid releases of the upstream Node.js core project. Doing this allows us to provide, for example, applications and tools to get developers up and running quickly, Node.js container images, and integrations with other components of Red Hat’s cloud-native stack. If you need it, Red Hat provides both production and development support for supported configurations with Red Hat OpenShift, Red Hat Enterprise Linux, and &lt;a href="https://access.redhat.com/solutions/4309231" target="_blank" rel="noopener noreferrer"&gt;Universal Base Images&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;More resources&lt;/h2&gt; &lt;p&gt;Check out the following resources:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Article: &lt;a href="https://developers.redhat.com/blog/2019/09/13/develop-with-node-js-in-a-container-on-red-hat-enterprise-linux/"&gt;Develop with Node.js in a container on RHEL&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Background: &lt;a href="https://developers.redhat.com/blog/2015/10/07/red-hat-joins-node-js-foundation/"&gt;Red Hat joins the Node.js Foundation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Downloads: &lt;a href="https://catalog.redhat.com/software/containers/search?q=node.js&amp;#38;p=1" target="_blank" rel="noopener noreferrer"&gt;Container images for the Red Hat build of Node.js&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How-to: &lt;a href="https://lanceball.com/words/2017/01/05/protect-your-node-js-rest-clients-with-circuit-breakers" target="_blank" rel="noopener noreferrer"&gt;Protect Your Node.js REST Clients with Circuit Breakers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Node.js 12: &lt;a href="https://developers.redhat.com/blog/2019/04/29/use-node-js-12-on-red-hat-openshift-today/"&gt;Use Node.js 12 on Red Hat OpenShift today&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Presentation: &lt;a href="http://lanceball.com/riviera-dev-2017/" target="_blank" rel="noopener noreferrer"&gt;Node.js on OpenShift for Your Enterprise&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Product page: &lt;a href="https://access.redhat.com/products/nodejs/" target="_blank" rel="noopener noreferrer"&gt;Red Hat&amp;#8217;s &lt;/a&gt;&lt;a href="https://access.redhat.com/products/nodejs/" target="_blank" rel="noopener noreferrer"&gt;Node.js&lt;/a&gt;&lt;a href="https://access.redhat.com/products/nodejs/" target="_blank" rel="noopener noreferrer"&gt; build&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#38;linkname=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F09%2Fnode-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more%2F&amp;#038;title=Node.js%20update%20for%20Red%20Hat%20Runtimes%20brings%20improved%20support%20for%20native%20modules%2C%20diagnostic%20reporting%2C%20and%20more" data-a2a-url="https://developers.redhat.com/blog/2020/04/09/node-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more/" data-a2a-title="Node.js update for Red Hat Runtimes brings improved support for native modules, diagnostic reporting, and more"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/09/node-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more/"&gt;Node.js update for Red Hat Runtimes brings improved support for native modules, diagnostic reporting, and more&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FyZXet3Rv7E" height="1" width="1" alt=""/&gt;</content><summary>Developing applications on a Kubernetes distribution like Red Hat OpenShift—or on Red Hat Enterprise Linux (RHEL), or by using our Universal Base Images—is easier with Red Hat’s build of Node.js. The latest update of Red Hat Runtimes now includes Node.js 12.4.1, which provides a supported runtime for LTS releases. This new Red Hat build of Node.js together with the release of Red Hat Enterprise Li...</summary><dc:creator>Syed M Shaaf</dc:creator><dc:date>2020-04-09T07:00:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/09/node-js-update-for-red-hat-runtimes-brings-improved-support-for-native-modules-diagnostic-reporting-and-more/</feedburner:origLink></entry><entry><title>Why Kubernetes native instead of cloud native?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gWOwNUD3HhI/" /><category term="app development" scheme="searchisko:content:tags" /><category term="application development" scheme="searchisko:content:tags" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="hybrid cloud" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="orchestration" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Ken Finnigan</name></author><id>searchisko:content:id:jbossorg_blog-why_kubernetes_native_instead_of_cloud_native</id><updated>2020-04-08T07:00:26Z</updated><published>2020-04-08T07:00:26Z</published><content type="html">&lt;p&gt;First off, I&amp;#8217;m not referring to &lt;em&gt;Knative&lt;/em&gt;, the &lt;span style="font-weight: 400;"&gt;Kubernetes-based platform for modern serverless workloads, but &lt;em&gt;Kubernetes native&lt;/em&gt;. &lt;/span&gt;In this article, I will explain what Kubernetes native is, what it means, and why it should matter to developers and enterprises. Before we delve into Kubernetes native, I will recap what cloud-native application development is and how that leads us to Kubernetes-native application development.&lt;/p&gt; &lt;p&gt;&lt;span id="more-688987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Cloud native: A recap&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We’ve all heard of the &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;cloud-native&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt; approach for developing applications and services, and even more so since the Cloud Native Computing Foundation (CNCF) was &lt;/span&gt;&lt;a href="https://www.infoq.com/news/2015/07/kubernetes-v1-released/" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;founded in 2015&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;—but w&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;here did the term come from? The term &lt;em&gt;cloud native&lt;/em&gt; was first used by Bill Wilder in his book, &lt;a href="http://shop.oreilly.com/product/0636920023777.do" target="_blank" rel="noopener noreferrer"&gt;&lt;em&gt;Cloud Architecture Patterns&lt;/em&gt;&lt;/a&gt; (O&amp;#8217;Reilly Media, 2012)&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. According to Wilder, a cloud-native application is any application that was architected to take full advantage of cloud platforms. These applications:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use cloud platform services.&lt;/li&gt; &lt;li&gt;Scale horizontally.&lt;/li&gt; &lt;li&gt;Scale automatically, using proactive and reactive actions.&lt;/li&gt; &lt;li&gt;Handle node and transient failures without degrading.&lt;/li&gt; &lt;li&gt;Feature non-blocking asynchronous communication in a loosely coupled architecture.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Related to cloud-native technologies is &lt;/span&gt;&lt;a href="https://12factor.net/" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;The Twelve-Factor App&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, a set of patterns (or methodology) for building applications that are delivered as a service. Cloud architecture patterns are often described as being required for developing cloud-native applications. Twelve-factor overlaps with Wilder&amp;#8217;s cloud architecture patterns, but 12-factor goes into the details of application development that are not specifically related to cloud-native development. They equally apply to application development in general and how an application integrates with the infrastructure.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Wilder wrote his book during a period of growing interest in developing and deploying cloud-native applications. Developers had a variety of public and private platforms to choose from, including Amazon AWS, Google Cloud, Microsoft Azure, and many smaller cloud providers. Hybrid-cloud deployments were also becoming more prevalent around then, which presented challenges.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Issues related to the hybrid cloud are not new, &lt;/span&gt;&lt;em&gt;&lt;a href="https://ieeexplore.ieee.org/abstract/document/5719569" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Reservoir &amp;#8211; When One Cloud is Not Enough&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; (IEEE 2011)&lt;span style="font-weight: 400;"&gt;, covers several of them&lt;/span&gt;.&lt;/p&gt; &lt;h2&gt;Orchestrating the hybrid cloud&lt;/h2&gt; &lt;p&gt;As an architectural approach, the &lt;a href="https://www.infoworld.com/article/2683561/the-case-for-the-hybrid-cloud.html" target="_blank" rel="noopener noreferrer"&gt;hybrid cloud&lt;/a&gt; supports deploying the same application to a mixture of private and public clouds, often across different cloud providers. A hybrid cloud offers the flexibility of not being reliant on a single cloud provider or region. If one cloud provider has network issues, you can switch deployments and traffic to another provider to minimize the impact on your customers.&lt;/p&gt; &lt;p&gt;On the downside, each cloud provider has its preferred mechanisms—the command-line interface (CLI), discovery protocols, and event-driven protocols, to name a few—that developers must use to deploy their applications. &lt;span style="font-weight: 400;"&gt;This complication made deploying the same application to multiple cloud providers in an automated fashion impossible.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;To solve the problem, many orchestration frameworks began to appear. However, it wasn’t long before &lt;a href="https://developers.redhat.com/topics/kubernetes" target="_blank" rel="noopener noreferrer"&gt;Kubernetes&lt;/a&gt; became the de-facto standard for orchestration. These days it would be unusual to find a cloud provider that doesn’t offer the ability to deploy applications into Kubernetes. Google, Amazon, and Microsoft all offer Kubernetes as an orchestration layer.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Get ready for Kubernetes native&lt;/h2&gt; &lt;p&gt;For developers deploying applications to a hybrid cloud, it makes sense to shift focus from cloud native to Kubernetes native. &lt;span style="font-weight: 400;"&gt;There’s a great article on a &lt;/span&gt;&lt;a href="https://medium.com/@cloudark/towards-a-kubernetes-native-future-3e75d7eb9d42" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes-native&lt;/span&gt;&lt;/a&gt; future&lt;span style="font-weight: 400;"&gt; that covers what a Kubernetes-native stack means. The key takeaway is that Kubernetes-native is a specialization of cloud-native, and not divorced from what cloud native defines. Whereas a cloud-native application is intended for the cloud, a &lt;em&gt;Kubernetes-native&lt;/em&gt; application is designed and built for Kubernetes.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Before discussing the benefits of targeting Kubernetes-native applications and services, we need to understand all of the differences. Above we &lt;span style="font-weight: 400;"&gt;mentioned the benefits of Kubernetes native for infrastructure management. Deploying applications to Kubernetes with identical tools across cloud providers is key. Next, we revisit the question of what makes an application (or a microservice, function, or deployment) cloud-native. Can an application truly be cloud-native? Can an application seamlessly work on any cloud provider?&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In the early days of cloud-native development, orchestration differences prevented applications from being truly cloud-native. Kubernetes resolved the orchestration problem, but Kubernetes does not cover cloud provider services or an event backbone. To answer whether any application can be cloud-native we need to cover the different types of applications that can be developed.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Stateful versus isolated applications&lt;/h3&gt; &lt;p&gt;We often categorize applications as either &lt;em&gt;stateless&lt;/em&gt; or &lt;em&gt;stateful&lt;/em&gt;. Just as critical is the split between &lt;em&gt;isolated&lt;/em&gt; and &lt;em&gt;coupled&lt;/em&gt;. Determining whether an application is cloud-native is impacted by both these factors. &lt;span style="font-weight: 400;"&gt;When I say coupled, I’m not referring to the application&amp;#8217;s internal code being tightly or loosely coupled. I’m referring to whether an application relies on external applications and services at all.&lt;/span&gt; An application that doesn&amp;#8217;t interact with anything outside itself is &lt;em&gt;isolated&lt;/em&gt;. An application that uses one or more external services is &lt;em&gt;coupled&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Consider Figure 1, which shows statefulness and isolation on different axes.&lt;/p&gt; &lt;div id="attachment_688997" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-688997" class="wp-image-688997 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/AppTypes-1024x839.png" alt="A graph showing four application types on an axis: Isolated and Stateful; Coupled and Stateful; Isolated and Stateless; and Coupled and Stateless." width="640" height="524" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/AppTypes-1024x839.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/AppTypes-300x246.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/AppTypes-768x629.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/AppTypes.png 1243w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-688997" class="wp-caption-text"&gt;Figure 1. Four variations of isolation and statefulness.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Note that &lt;em&gt;isolated and stateful&lt;/em&gt; applications require a state to operate, but the state is retained within the application itself, not stored externally. Not many applications fall into this category as they wouldn&amp;#8217;t handle restarts well. By contrast, c&lt;em&gt;oupled and stateless&lt;/em&gt; applications are stateless but must couple with external services to respond to requests. This type of application is more common as it includes interacting with databases, message brokers, and Apache Kafka.&lt;/p&gt; &lt;p&gt;Any application that is isolated, whether stateless or stateful, can adhere to cloud-native principles. Such an application can be packaged for different providers in a hybrid cloud. Applications that require coupling to external services also could be considered cloud-native, but can such applications be deployed to a hybrid cloud? The answer to that question is everyone&amp;#8217;s favorite: It depends.&lt;/p&gt; &lt;h3&gt;A tale of two services&lt;/h3&gt; &lt;p&gt;If the external service is a database provisioned on Kubernetes for the application to use, then the answer is yes: The application is independent of the cloud provider and can be deployed to a hybrid cloud. This type of architecture places a larger burden on operations. Requiring a database, or other data storage, to be installed and managed in a Kubernetes environment. That&amp;#8217;s far from ideal.&lt;/p&gt; &lt;p&gt;Another option is to use a cloud provider for database services. Doing that would reduce the operational burden, but we would be tied to a specific cloud services provider. In this case, we would not be able to deploy the application to a hybrid cloud across multiple providers.&lt;/p&gt; &lt;h2&gt;Kubernetes provisioning for hybrid-cloud services&lt;/h2&gt; &lt;p&gt;Now let&amp;#8217;s consider a real-world example. If an application is written to use Amazon S3 for data storage, the development team interacts with it using custom Amazon S3 APIs. If we decide to deploy the application to Google Cloud, we can&amp;#8217;t expect it to work with Google Cloud Storage without being modified for Google Cloud Storage APIs. &lt;span style="font-weight: 400;"&gt;Both versions might be cloud-native, but they’re not cloud-provider agnostic. This factor poses an issue for fully supporting the hybrid-cloud model.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The Kubernetes community is investigating &lt;a href="https://github.com/kubernetes/enhancements/pull/1383" target="_blank" rel="noopener noreferrer"&gt;a solution for object bucket storage&lt;/a&gt;, but that fix doesn&amp;#8217;t solve the more general issue of API portability. Even if Kubernetes has a way to generically provision a bucket-type storage mount, like Amazon S3, developers will still need to utilize Amazon S3 APIs to interact with them. Developers still require cloud provider-specific APIs in their applications.&lt;/p&gt; &lt;p&gt;Enterprises can protect their business code by writing generic wrappers around different services. Most enterprises don&amp;#8217;t want to expend valuable resources on developing wrappers for services, however. More importantly, service wrappers still require re-packaging applications with different dependencies for each cloud provider environment.&lt;/p&gt; &lt;p&gt;The missing piece, from a developer&amp;#8217;s perspective, is an application API that is sufficiently abstracted for use across cloud providers for the same type of service.&lt;/p&gt; &lt;h2&gt;Kubernetes: The new application server?&lt;/h2&gt; &lt;p&gt;Although Kubernetes is evolving to enable environment provisioning for services that developers need, we still need a way to fill the gap between the application&amp;#8217;s business logic and interaction with those services. That&amp;#8217;s one reason I previously argued that &lt;a href="https://developers.redhat.com/blog/2019/01/30/curse-you-choices-kubernetes-or-application-servers-part-3" target="_blank" rel="noopener noreferrer"&gt;application servers and frameworks still have a role to play on Kubernetes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Adopting Kubernetes-native environments ensures true portability for the hybrid cloud. However, we also need a Kubernetes-native framework to provide the &amp;#8220;glue&amp;#8221; for applications to seamlessly integrate with Kubernetes and its services. &lt;span style="font-weight: 400;"&gt;Without application portability, the hybrid cloud is relegated to an environment-only benefit.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;That framework is &lt;a href="https://developers.redhat.com/topics/quarkus/" target="_blank" rel="noopener noreferrer"&gt;Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Quarkus: The Kubernetes-native framework&lt;/h2&gt; &lt;p&gt;Quarkus is a Kubernetes-native Java framework that can be used to &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/" target="_blank" rel="noopener noreferrer"&gt;facilitate application portability&lt;/a&gt; for hybrid cloud environments. As an example, Quarkus lets you generate descriptors for deploying to Kubernetes from within your application. It&amp;#8217;s also easily adjusted &lt;span style="font-weight: 400;"&gt;with configuration values in&lt;/span&gt; the &lt;code&gt;application.properties&lt;/code&gt; file. With the health extension, the generated descriptor contains the readiness and liveness probes crucial to Kubernetes knowing if your application is healthy or not. These features simplify life for developers by creating the application deployment in Kubernetes and knowing the right way to integrate with Kubernetes pod lifecycle handling.&lt;/p&gt; &lt;p&gt;Quarkus also combines build-time optimizations and reactive patterns to reduce application memory consumption. This factor has a direct impact on potential deployment density. Being able to run more pods on the same infrastructure is an important aspect of Quarkus (read more about this from &lt;a href="https://quarkus.io/blog/aviatar-experiences-significant-savings/" target="_blank" rel="noopener noreferrer"&gt;Lufthansa Technik&lt;/a&gt;, &lt;a href="https://quarkus.io/blog/asiakastieto-chooses-quarkus-for-microservices/" target="_blank" rel="noopener noreferrer"&gt;The Asiakastieto Group&lt;/a&gt;, and &lt;a href="https://quarkus.io/blog/vodafone-greece-replaces-spring-boot/" target="_blank" rel="noopener noreferrer"&gt;Vodafone Greece&lt;/a&gt;). On a public cloud, this feature allows the use of smaller instances to run an application and, as a consequence, reduce costs.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s still early days for Quarkus, and for our goal of fulfilling Kubernetes-native application development to the fullest extent possible. However, we&amp;#8217;ve made great progress in a short amount of time, and we are committed to ensuring that Quarkus provides the best Kubernetes-native experience for all developers.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;That Kubernetes-native is a specialization of cloud-native means that there are many similarities between them. The main difference is with cloud provider portability. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Why is that distinction important? &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Taking full advantage of the hybrid cloud and using multiple cloud providers requires that applications are deployable to any cloud provider. Without such a feature, you’re tied into a single cloud provider and reliant on them being up 100% of the time. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Enjoying the benefits of the hybrid cloud requires the developer to embrace Kubernetes-native application development, and not just for environments, but for applications as well. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes native is the solution to cloud portability concerns. &lt;/span&gt;&lt;a href="https://quarkus.io" target="_blank" rel="noopener noreferrer"&gt;&lt;span style="font-weight: 400;"&gt;Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; is the conduit between applications and Kubernetes that facilitates that hybrid cloud portability. Through ongoing work to offer abstractions for various services provided, &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Quarkus&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; will help take you there!&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#38;linkname=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F08%2Fwhy-kubernetes-native-instead-of-cloud-native%2F&amp;#038;title=Why%20Kubernetes%20native%20instead%20of%20cloud%20native%3F" data-a2a-url="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/" data-a2a-title="Why Kubernetes native instead of cloud native?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/"&gt;Why Kubernetes native instead of cloud native?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gWOwNUD3HhI" height="1" width="1" alt=""/&gt;</content><summary>First off, I’m not referring to Knative, the Kubernetes-based platform for modern serverless workloads, but Kubernetes native. In this article, I will explain what Kubernetes native is, what it means, and why it should matter to developers and enterprises. Before we delve into Kubernetes native, I will recap what cloud-native application development is and how that leads us to Kubernetes-native ap...</summary><dc:creator>Ken Finnigan</dc:creator><dc:date>2020-04-08T07:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/</feedburner:origLink></entry><entry><title>Migrating applications to OpenShift, Part 1: Overview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/D6mgPWQIesE/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="jenkins pipelines" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="migration" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Tom Stockwell</name></author><id>searchisko:content:id:jbossorg_blog-migrating_applications_to_openshift_part_1_overview</id><updated>2020-04-07T07:00:29Z</updated><published>2020-04-07T07:00:29Z</published><content type="html">&lt;p&gt;I help teams migrate their applications onto &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;, so I can&amp;#8217;t help but notice patterns and considerations that arise regarding the migration process. Such operations have many domain-specific factors, but in regards to getting the applications up and running on OpenShift, there appear to be several common patterns that teams use to migrate successfully.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve found the following are useful effort breakpoints:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Proof of concept.&lt;/li&gt; &lt;li&gt;Set up continuous integration and continuous delivery (CI/CD) for a single environment.&lt;/li&gt; &lt;li&gt;Set up CD for multiple environments.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In this series, I will break down the work involved in each of these stages and use the &lt;a href="https://istio.io/docs/examples/bookinfo/" target="_blank" rel="nofollow noopener noreferrer"&gt;&lt;code&gt;bookinfo&lt;/code&gt;&lt;/a&gt; application from the &lt;a href="https://istio.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;Istio&lt;/a&gt; project to demonstrate. I selected &lt;code&gt;bookinfo&lt;/code&gt; because it is an existing sample microservices application that I can deploy from scratch onto OpenShift. Additionally, &lt;code&gt;bookinfo&lt;/code&gt; is polyglot (the microservices are each written in different languages), which allows me to showcase my thought process by migrating different types of services across a spectrum of programming languages.&lt;/p&gt; &lt;p&gt;I forked the &lt;code&gt;bookinfo&lt;/code&gt; subdirectory from Istio using the process described by GitHub: &lt;a href="https://help.github.com/en/github/using-git/splitting-a-subfolder-out-into-a-new-repository" target="_blank" rel="noopener noreferrer"&gt;Splitting a subfolder out into a new repository&lt;/a&gt;. You can find my fork at &lt;a href="https://github.com/rh-tstockwell/bookinfo" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;rh-tstockwell/bookinfo&lt;/code&gt;&lt;/a&gt;. The master branch is a direct fork from &lt;a href="https://github.com/istio/istio/tree/master/samples/bookinfo" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;istio/istio&lt;/code&gt;&lt;/a&gt;, while the development branch contains the changes made in this series.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;For this series, I assume you have at least beginner OpenShift, Kubernetes, and container knowledge. Additionally, you will need developer access to an OpenShift cluster. If you do not have one available to you, you can try it out for free (see &lt;a href="https://www.openshift.com/learn/get-started/" target="_blank" rel="noopener noreferrer"&gt;Get started with OpenShift&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;You will also need to &lt;a href="https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html#installing-the-cli" target="_blank" rel="noopener noreferrer"&gt;install the &lt;code&gt;oc&lt;/code&gt; client&lt;/a&gt; and successfully log into your cluster with standard developer privileges. If you followed one of the guides from the get started page, your guide should have instructions for you.&lt;/p&gt; &lt;p&gt;I primarily use the &lt;code&gt;oc&lt;/code&gt; client in this series (I generally prefer the command line), but you can make all of these changes using the GUI as well.&lt;/p&gt; &lt;h2&gt;Proof of concept&lt;/h2&gt; &lt;p&gt;First, the goal is to get your application up and running quickly to act as a proof of concept. The aim is to understand the complexity involved in your undertaking as early as possible to de-risk what you can upfront.&lt;/p&gt; &lt;p&gt;My rules of thumb for this stage are, when possible:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Spend as little time as possible getting your apps to work.&lt;/li&gt; &lt;li&gt;Use standard s2i images or templates (&lt;a href="https://github.com/openshift/source-to-image/blob/master/README.md#goals"&gt;learn why here&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Avoid code changes.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; From experience, it is Hard Work&lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; supporting drifting codebases during a platform migration, so we try to avoid this issue where we can.&lt;/p&gt; &lt;p&gt;In Part 2 of this series, I will demonstrate how easy it is to get &lt;code&gt;bookinfo&lt;/code&gt; up and running on an OpenShift cluster using &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/application_lifecycle/new_app.html#using-the-cli"&gt;&lt;code&gt;oc new-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Set up CI/CD for a single environment&lt;/h2&gt; &lt;p&gt;The second goal is to be able to make changes to your application through a simple CI/CD pipeline. This pipeline allows you to evolve your application faster, and with more dependability and assurance.&lt;/p&gt; &lt;p&gt;In this stage, we export Kubernetes (k8s) resources to &lt;a href="https://www.atlassian.com/git/tutorials/what-is-version-control#benefits-of-version-control" target="_blank" rel="nofollow noopener noreferrer"&gt;version control&lt;/a&gt;, which can be alongside the application or in a separate repository. We then create a simple &lt;a href="https://www.redhat.com/en/topics/devops/what-is-ci-cd"&gt;CI/CD pipeline&lt;/a&gt; that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Runs your defined tests.&lt;/li&gt; &lt;li&gt;Deploys new application code on demand.&lt;/li&gt; &lt;li&gt;Deploys updates to Kubernetes resources required by the application.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Ideally, this process should work from and to any possible state.&lt;/p&gt; &lt;p&gt;Once you have a completed pipeline, I recommend cleaning up any technical debt that resulted from getting your apps working. You should also implement anything that you left out of the proof of concept that you require for a working, production-ready application (from an application perspective, not necessarily from an ops perspective). I purposefully delay dealing with these issues until we have a working pipeline so we can use the benefits of the pipeline when implementing these more difficult features.&lt;/p&gt; &lt;p&gt;I will showcase a simple series of CI/CD pipelines using &lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/openshift_pipeline.html" target="_blank" rel="noopener noreferrer"&gt;OpenShift and &lt;/a&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/openshift_pipeline.html" target="_blank" rel="noopener noreferrer"&gt;Jenkins &lt;/a&gt;&lt;a href="https://docs.openshift.com/container-platform/3.11/dev_guide/openshift_pipeline.html" target="_blank" rel="noopener noreferrer"&gt;Pipelines&lt;/a&gt; for the &lt;code&gt;bookinfo&lt;/code&gt; project in Part 3 of this series.&lt;/p&gt; &lt;h2&gt;Set up continuous delivery for multiple environments&lt;/h2&gt; &lt;p&gt;Lastly, we need to reconfigure the CD pipelines we created in the previous step to add the ability to deploy to multiple environments. I like to keep this step separate from the previous one as it usually involves extra steps, configuration, and templating of the k8s resources. You can also implement this step in many ways.&lt;/p&gt; &lt;p&gt;In Part 4 of this series, I will show how to implement a basic multi-environment CD pipeline in Jenkins with no external software.&lt;/p&gt; &lt;h2&gt;Further considerations&lt;/h2&gt; &lt;p&gt;Now, I haven&amp;#8217;t tried to cover every single aspect of running an application on OpenShift, but here a few things that I haven&amp;#8217;t covered that you might want to investigate once you have reached this stage in your journey:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Manage your k8s resources with &lt;a href="https://blog.openshift.com/introduction-to-gitops-with-openshift/" target="_blank" rel="noopener noreferrer"&gt;GitOps&lt;/a&gt; (you should already be part-way there, as the pipelines already source the k8s resources from version control).&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/managing-secrets-openshift-vault-integration/" target="_blank" rel="noopener noreferrer"&gt;Improve your secrets management&lt;/a&gt; with something like &lt;a href="https://www.vaultproject.io/" target="_blank" rel="nofollow noopener noreferrer"&gt;HashiCorp Vault&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Set up a persistent storage/backup/redundancy lifecycle (which is dependant on your specific environment and needs).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#38;linkname=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F07%2Fmigrating-applications-to-openshift-part-1-overview%2F&amp;#038;title=Migrating%20applications%20to%20OpenShift%2C%20Part%201%3A%20Overview" data-a2a-url="https://developers.redhat.com/blog/2020/04/07/migrating-applications-to-openshift-part-1-overview/" data-a2a-title="Migrating applications to OpenShift, Part 1: Overview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/07/migrating-applications-to-openshift-part-1-overview/"&gt;Migrating applications to OpenShift, Part 1: Overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/D6mgPWQIesE" height="1" width="1" alt=""/&gt;</content><summary>I help teams migrate their applications onto Red Hat OpenShift, so I can’t help but notice patterns and considerations that arise regarding the migration process. Such operations have many domain-specific factors, but in regards to getting the applications up and running on OpenShift, there appear to be several common patterns that teams use to migrate successfully. I’ve found the following are us...</summary><dc:creator>Tom Stockwell</dc:creator><dc:date>2020-04-07T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/07/migrating-applications-to-openshift-part-1-overview/</feedburner:origLink></entry><entry><title>Integrating with SaaS Applications - Example Processes and 3rd-party Platform Integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/N6IWmJ0htHM/integrating-saas-applications-example-processes-and-3rd-party-platform.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integrating_with_saas_applications_example_processes_and_3rd_party_platform_integration</id><updated>2020-04-07T08:57:39Z</updated><published>2020-04-07T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-f1x1Wl8_YFU/Xm-M1cKi5PI/AAAAAAAAw-0/GI1Gxp8I8_4bRPmxKxEcwzAxC4OOn8XPACNcBGAsYHQ/s1600/element-10.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="integrating process and SaaS applications" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-f1x1Wl8_YFU/Xm-M1cKi5PI/AAAAAAAAw-0/GI1Gxp8I8_4bRPmxKxEcwzAxC4OOn8XPACNcBGAsYHQ/s320/element-10.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 6 - Example processes and SaaS application integration&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;The previous article in this series looked at&amp;nbsp;&lt;a href="https://www.schabell.org/2020/03/integrating-saas-applications-example-third-party-platform-integration.html" target="_blank"&gt;3rd-party platforms as SaaS application example.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution.&lt;br /&gt;&lt;br /&gt;It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched.&lt;br /&gt;&lt;br /&gt;Having completed the outline of the blueprint details and the resulting logical diagram elements, it's now time to take a look as specific examples.&lt;br /&gt;&lt;br /&gt;In this article we'll continue building the previous examples by sharing how customers are integrating processes and 3rd-party platforms as SaaS applications in their architectures.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprint scenarios&lt;/h3&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or&amp;nbsp;&lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt;&amp;nbsp;with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the solution.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Integrating processes and SaaS applications&lt;/h3&gt;The example blueprint shown in figure titled&amp;nbsp;&lt;i&gt;Example: Third Party Platform Process Integration&lt;/i&gt;&amp;nbsp;outlines how to integrate processes and an existing 3rd-party platform as if it's a SaaS platform.&lt;br /&gt;&lt;br /&gt;As is often the case, organizational choices in our past have left us with legacy components in our architectures. While sometimes these are simple components to integrate with, we live and learn by applying the same abstractions to our larger platforms that might be hosting a collection of functionality in our organization.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-WHTufsjHEOI/XoSiJc1dkGI/AAAAAAAAxAo/5XK3m9P2jw0X6AFVszWAjWmOaOH4YAmXgCNcBGAsYHQ/s1600/%2528Public%2B%252B%2BInternal%2529%2BPortfolio%2BArchitecture%2BBlueprint%2B-%2BIntegrate%2Bwith%2BSaaS%2BApplications.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating process and SaaS applications" border="0" data-original-height="540" data-original-width="960" height="180" src="https://1.bp.blogspot.com/-WHTufsjHEOI/XoSiJc1dkGI/AAAAAAAAxAo/5XK3m9P2jw0X6AFVszWAjWmOaOH4YAmXgCNcBGAsYHQ/s320/%2528Public%2B%252B%2BInternal%2529%2BPortfolio%2BArchitecture%2BBlueprint%2B-%2BIntegrate%2Bwith%2BSaaS%2BApplications.png" title="" width="320" /&gt;&lt;/a&gt;Furthermore, organizations have processes in place that become dependent on their ability to react on information from SaaS application. Along those same lines these processes produce information that might need to be shared with these external SaaS applications. Integrating process and SaaS applications introduces stateful complexities into the integration solution.&lt;br /&gt;&lt;br /&gt;Let's assume this example is making use of a legacy platform hosting a myriad of specialized services that have become impossible to maintain. The amount of interfaces and maintenance has become such a burden that the organization desires to migrate away from the legacy platform, yet cannot at this time due to their dependency on those hosted services.&lt;br /&gt;&lt;br /&gt;A logical approach is to segregate the platform as if it's a cloud or SaaS service. This allows for gradual migration of the existing services from the 3rd-party platform at your convenience, including evenutal moves to offsite or cloud-based service hosting. SaaS integration with these services or applications provides many options going forward in managing the architecture.&lt;br /&gt;&lt;br /&gt;The blueprint here shows a specific part of the integration, where a front end web connection uses front-end microservices to access integration microservices that manage that generice access to the third-party platform. Note, the security aspects are left in this example to ensure that you remember to include authentication and authorization across your integration landscape.&lt;br /&gt;&lt;br /&gt;Within the integration microservices lies the solution for processes and 3rd-party platform integration. The stateful nature of processes means that they are awaiting a trigger to start or continue their process, often based on data supplied with that trigger. On the other hand, processes can also reach a state where they wait after sending data requests to a 3rd-party platform. How does this integration communication happen?&lt;br /&gt;&lt;br /&gt;The solution in this blueprint is inside the integration microservices where messaging is used with processes posting data to message queues and listening for triggers from microservices that interact with queues receiving messages from 3rd-party platforms.&lt;br /&gt;&lt;br /&gt;Implementation details are left up to the reader to quantify as each organizations needs and usage of a specific SaaS integrations with all possible third-party platforms can not be captured in a generic architectural blueprint beyond the above.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on integrating SaaS applications portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" target="_blank"&gt;Example CRM integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/03/integrating-saas-applications-example-crm-connector-integration.html" target="_blank"&gt;Example CRM connector integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/03/integrating-saas-applications-example-third-party-platform-integration.html" target="_blank"&gt;Example 3rd-party platform integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a _blank="" href="https://www.schabell.org/2020/04/integrating-saas-applications-example-processes-and-3rd-party-platform.html" target="_blank"&gt;Example processes and 3rd-party platform integration&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;This completes the series on integrating with SaaS applications. If you missed any of the previous articles, they're available in linked list above.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qGGk4Bc1fDc:MBR66A5JWPw:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qGGk4Bc1fDc:MBR66A5JWPw:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qGGk4Bc1fDc:MBR66A5JWPw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qGGk4Bc1fDc:MBR66A5JWPw:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qGGk4Bc1fDc:MBR66A5JWPw:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/qGGk4Bc1fDc" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/N6IWmJ0htHM" height="1" width="1" alt=""/&gt;</content><summary>Part 6 - Example processes and SaaS application integration The previous article in this series looked at 3rd-party platforms as SaaS application example. The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution. It's a starting point for the generic architectural blueprint that rises from several customer solution that were resea...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-04-07T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/qGGk4Bc1fDc/integrating-saas-applications-example-processes-and-3rd-party-platform.html</feedburner:origLink></entry><entry><title>This Week in JBoss: April 3nd, 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/25tqG0tHmMQ/this-week-in-jboss-april-3nd-2020" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>dnaro27</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_april_3nd_2020</id><updated>2020-04-03T10:45:16Z</updated><published>2020-04-03T10:45:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:ab494c9e-255b-470f-9081-0f08593d146d] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial where we gather news from our communities and explore developments from our projects.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Release Roundup&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Quarkus 1.3.1.Final is out. This release makes Java 11 the default for new projects. Heads up for all Java 8 users, deprecation is coming in Quarkus 1.4. &lt;a class="jive-link-external-small" href="https://quarkus.io/blog/quarkus-1-3-1-final-released/" rel="nofollow"&gt;Read all about it here&lt;/a&gt;. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Quarkus Tools for Eclipse is also available. Find out &lt;a class="jive-link-external-small" href="https://quarkus.io/blog/eclipse-got-quarkused/" rel="nofollow"&gt;how to get Quarkus Tools in your Eclipse IDE&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;WildFly S2I (Source-to-Image) builder and runtime Docker images for WildFly 19 are released on &lt;a class="jive-link-external-small" href="https://quay.io/organization/wildfly" rel="nofollow"&gt;quay.io&lt;/a&gt;. Among the notable changes in this release is the inclusion of JGroups with the default server configuration. Visit the &lt;a class="jive-link-external-small" href="https://wildfly.org/news/2020/03/20/WildFly-s2i-19-released/" rel="nofollow"&gt;blog post to learn more and try out some clustering examples&lt;/a&gt;. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Keycloak 9.0.2 has &lt;a class="jive-link-external-small" href="https://www.keycloak.org/2020/03/keycloak-902-released" rel="nofollow"&gt;also shipped&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;All Things Containerized&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Fernando Lozano's &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/03/24/red-hat-universal-base-images-for-docker-users/" rel="nofollow"&gt;recent article&lt;/a&gt; explores the RHEL UBI in-depth and gives an informative look how OCI standards mean that you can keep using the Docker toolset on Mac or Windows systems to build images that run seamlessly with new RHEL 8 container tools such as Podman.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schnabell brings us &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/04/code-ready-containers-installing-process-automation-from-developer-catalog.html" rel="nofollow"&gt;another excellent tutorial&lt;/a&gt; that shows you how to get OpenShift Container Platform running locally with Code Ready Containers on your laptop and then use Red Hat process automation tooling with pre-installed containers.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Edson Yanaga delivers a &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/03/30/distribute-your-microservices-data-with-events-cqrs-and-event-sourcing/" rel="nofollow"&gt;DevNation Tech Talk&lt;/a&gt; that focuses on how event-driven architectures help you succeed in distributing data for microservices.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;JBang Everywhere&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If you haven't yet taken jbang for a spin, you're missing out. jbang makes Java super easy, compiling and packaging with zero need for pom.xml or build.gradle files, maven or gradle wrappers, or extra directory layers. In his &lt;a class="jive-link-external-small" href="https://xam.dk/blog/jbang-everywhere/" rel="nofollow"&gt;latest post&lt;/a&gt;, Max Andersen highlights some very interesting uses for his jbang utility, including pure Java implementations of git and kubectl plugins. It's worth a read.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Other Goings On&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Infinispan have recently explained their new strategy for improving technical accuracy and maintainability with their documentation. Check out the &lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/03/03/2020-03-17-documentation-strategy/" rel="nofollow"&gt;blog post&lt;/a&gt; and take a tour of the docs repository.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Strimzi introduces support for MirrorMaker 2.0, which brings a more dynamic and automated approach to topic replication between Kafka clusters. Get a &lt;a class="jive-link-external-small" href="https://strimzi.io/2020/03/30/introducing-mirrormaker2.html" rel="nofollow"&gt;detailed look&lt;/a&gt; from Paul Mellor over at the Strimzi blog.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;David Malcolm introduces a static analyzer built into the GCC 10 compiler, which looks like a very promising approach to finding problems with C code at compile-time. Visit &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/" rel="nofollow"&gt;David's post&lt;/a&gt; to try it out and provide some early feedback.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:ab494c9e-255b-470f-9081-0f08593d146d] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/25tqG0tHmMQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another edition of the JBoss Editorial where we gather news from our communities and explore developments from our projects.   Release Roundup   Quarkus 1.3.1.Final is out. This release makes Java 11 the default for new projects. Heads up for all Java 8 users, deprecation is coming in Quarkus 1.4. Read all about it here.   Quarkus Tools for Eclipse is also available. Find out how to get...</summary><dc:creator>dnaro27</dc:creator><dc:date>2020-04-03T10:45:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/04/03/this-week-in-jboss-april-3nd-2020</feedburner:origLink></entry><entry><title>What’s new with tzdata: The time zone database for Red Hat Enterprise Linux</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZQJPhfMrFv4/" /><category term="C" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="time zone data" scheme="searchisko:content:tags" /><category term="tzdata" scheme="searchisko:content:tags" /><author><name>Patsy Franklin</name></author><id>searchisko:content:id:jbossorg_blog-what_s_new_with_tzdata_the_time_zone_database_for_red_hat_enterprise_linux</id><updated>2020-04-03T07:00:46Z</updated><published>2020-04-03T07:00:46Z</published><content type="html">&lt;p&gt;The &lt;a href="https://www.iana.org/time-zones" target="_blank" rel="noopener noreferrer"&gt;Time Zone Database&lt;/a&gt; (&lt;code&gt;tzdata&lt;/code&gt;) provides &lt;a href="https://developers.redhat.com/products/rhel/overview/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) with data that is specific to the local time zone. Applications in the Linux operating system use this data for various purposes. For instance, the GNU C Library (&lt;code&gt;glibc&lt;/code&gt;) uses &lt;code&gt;tzdata&lt;/code&gt; to ensure APIs such as &lt;code&gt;strftime()&lt;/code&gt; work correctly, while applications such as &lt;code&gt;/usr/bin/date&lt;/code&gt; use it to print the local date.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;tzdata&lt;/code&gt; package contains data files documenting both current and historic transitions for various time zones around the world. This data represents changes required by local government bodies or by time zone boundary changes, as well as changes to coordinated universal time (UTC) offsets and daylight saving time (DST).&lt;/p&gt; &lt;p&gt;This article is a quick update about changes to the &lt;code&gt;tzdata&lt;/code&gt; package in 2019, as well as possible time zone changes that we are monitoring for package updates in 2020.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;span id="more-692597"&gt;&lt;/span&gt;&lt;br /&gt; &lt;strong&gt;Note&lt;/strong&gt;: Occasionally, &lt;code&gt;tzdata&lt;/code&gt; changes are announced without much lead time, or with incomplete information. In these cases, we try to plan for different scenarios and rely on upstream maintainers to make decisions based on their experience. Once an update is ready, we update our sources, and our quality assurance and release engineers help push the update out as quickly as possible.&lt;/p&gt; &lt;h2&gt;Changes to the tzdata package in 2019 and 2020&lt;/h2&gt; &lt;p&gt;We released three updates to the &lt;code&gt;tzdata&lt;/code&gt; package in 2019, with most changes related to DST start- and end-date transitions. Fiji, Norfolk Island, Palestine, and the Metlakatla Indian Community of Ketchikan, Alaska, all changed their DST start and end dates. Additionally, Brazil no longer observes DST.&lt;/p&gt; &lt;p&gt;To maintain the accuracy of the information provided by the Time Zone Database, the upstream project frequently updates past timestamps as new information becomes available. In 2019, we made corrections to timestamps going back as far as 1866.&lt;/p&gt; &lt;p&gt;In 2020, we will be watching for changes associated with the United Kingdom’s departure from the European Union.&lt;/p&gt; &lt;p&gt;The upstream time zone project releases updates on &lt;a href="http://www.iana.org/time-zones" target="_blank" rel="noopener noreferrer"&gt;iana.org&lt;/a&gt;, where you can also find information about subscribing to the &lt;code&gt;tzdata&lt;/code&gt; email list and accessing the archives. The email list includes discussions of proposed changes and corrections, release announcements, and time zone-related news references.&lt;/p&gt; &lt;p&gt;For information specific to Red Hat Enterprise Linux, see the &lt;a href="https://access.redhat.com/articles/1187353" target="_blank" rel="noopener noreferrer"&gt;Red Hat Enterprise Linux Timezone Data (tzdata) Development Status Page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#38;linkname=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fwhats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux%2F&amp;#038;title=What%E2%80%99s%20new%20with%20tzdata%3A%20The%20time%20zone%20database%20for%20Red%20Hat%20Enterprise%20Linux" data-a2a-url="https://developers.redhat.com/blog/2020/04/03/whats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux/" data-a2a-title="What’s new with tzdata: The time zone database for Red Hat Enterprise Linux"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/03/whats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux/"&gt;What&amp;#8217;s new with tzdata: The time zone database for Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZQJPhfMrFv4" height="1" width="1" alt=""/&gt;</content><summary>The Time Zone Database (tzdata) provides Red Hat Enterprise Linux (RHEL) with data that is specific to the local time zone. Applications in the Linux operating system use this data for various purposes. For instance, the GNU C Library (glibc) uses tzdata to ensure APIs such as strftime() work correctly, while applications such as /usr/bin/date use it to print the local date. The tzdata package con...</summary><dc:creator>Patsy Franklin</dc:creator><dc:date>2020-04-03T07:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/03/whats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux/</feedburner:origLink></entry><entry><title>JetBrains IntelliJ Red Hat OpenShift extension provides debug support for OpenShift components</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UC2YKDJSs9M/" /><category term="debug" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="intellij" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="odo" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Stéphane BOUCHET</name></author><id>searchisko:content:id:jbossorg_blog-jetbrains_intellij_red_hat_openshift_extension_provides_debug_support_for_openshift_components</id><updated>2020-04-03T07:00:23Z</updated><published>2020-04-03T07:00:23Z</published><content type="html">&lt;p&gt;The 0.2.0 release version of the &lt;a href="https://developers.redhat.com/openshift/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift&lt;/a&gt; extension for JetBrains IntelliJ is now available. You can download the &lt;a href="https://plugins.jetbrains.com/plugin/12030-openshift-connector-by-red-hat" target="_blank" rel="noopener noreferrer"&gt;OpenShift Connector&lt;/a&gt; extension from the JetBrains Plugins Repository. This release provides a new &lt;strong&gt;OpenShift: Debug&lt;/strong&gt; action to simplify the debugging of OpenShift Components pushed to a cluster. It is similar to features developed for &lt;a href="https://developers.redhat.com/blog/2020/02/28/debugging-components-in-openshift-using-vs-code/" target="_blank" rel="noopener noreferrer"&gt;Visual Studio Code&lt;/a&gt; and &lt;a href="https://tools.jboss.org/blog/12.14.0.ga.html" target="_blank" rel="noopener noreferrer"&gt;JBoss Tools for Eclipse&lt;/a&gt;. OpenShift Connector uses &lt;a href="https://github.com/openshift/odo/" target="_blank" rel="noopener noreferrer"&gt;OpenShift Do&lt;/a&gt;&amp;#8216;s (&lt;code&gt;odo&lt;/code&gt;&amp;#8216;s) debug command under the hood and supports only local Java and Node.js components. This enhancement lets the user write and debug local code without leaving IntelliJ.&lt;/p&gt; &lt;p&gt;This article explains how &lt;strong&gt;OpenShift: Debug&lt;/strong&gt; works and shares the difference between debugging Java and Node.js components in IntelliJ.&lt;/p&gt; &lt;p&gt;&lt;span id="more-682317"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;How does OpenShift: Debug work?&lt;/h2&gt; &lt;p&gt;The debug feature is still experimental and only supports Java and NodeJS components. More languages like Python will be added when &lt;code&gt;odo&lt;/code&gt; supports them. This action is available in the OpenShift view from the component nodes context menu. It allows developers to use IntelliJ as usual for debugging applications (set breakpoints, inspect stacks and variables, do step by step, etc.) while the application is actually running on OpenShift.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s see how to debug a local component, step by step:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download and install the OpenShift Connector from the &lt;a href="https://plugins.jetbrains.com/plugin/12030-openshift-connector-by-red-hat" target="_blank" rel="noopener noreferrer"&gt;marketplace.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Log into an OpenShift cluster.&lt;/li&gt; &lt;li&gt;If not created yet, create a project inside OpenShift.&lt;/li&gt; &lt;li&gt;Create a component using a local module (or check out and use an &lt;a href="https://github.com/spring-projects/spring-petclinic.git"&gt;example&lt;/a&gt;.)&lt;/li&gt; &lt;li&gt;Create a URL to access the application inside a browser.&lt;/li&gt; &lt;li&gt;Push the component.&lt;/li&gt; &lt;li&gt;Place a breakpoint in the code.&lt;/li&gt; &lt;li&gt;Right-click the component and select &lt;strong&gt;Debug&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Wait for the local debugger to connect.&lt;/li&gt; &lt;li&gt;Right-click on the URL element below the component and select &lt;strong&gt;Open in browser&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Navigate to the application to reach where the breakpoint is set in the code.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Back to IntelliJ: The debugger is now active and waiting for actions.&lt;/p&gt; &lt;h3 id="user-content-debug-java-component" class="link-header"&gt;Debug a Java component&lt;/h3&gt; &lt;p&gt;Debugging a Java component is available in any version of IntelliJ. Simply select the &lt;strong&gt;Debug&lt;/strong&gt; action on a Java component&amp;#8217;s context menu. Doing this will automatically create a new Java remote debug configuration and use it to connect to the application running on OpenShift, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_702717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://raw.githubusercontent.com/wiki/redhat-developer/intellij-openshift-connector/java-debug-intellij.gif"&gt;&lt;img aria-describedby="caption-attachment-702717" class="wp-image-702717 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/java-debug-intellij-640.gif" alt="JetBrains IntelliJ animation showing a Java component debugging example" width="640" height="360" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-702717" class="wp-caption-text"&gt;Figure 1: Debugging a Java component in IntelliJ.&lt;/p&gt;&lt;/div&gt; &lt;h3 id="user-content-debug-nodejs-component" class="link-header"&gt;Debug Node.js component&lt;/h3&gt; &lt;p&gt;To debug a Node.js component, you need an IntelliJ version with JavaScript and Node.js support. See &lt;a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html" target="_blank" rel="noopener noreferrer"&gt;the version matrix on the JetBrains website&lt;/a&gt; for supported versions.&lt;/p&gt; &lt;p&gt;The same &lt;strong&gt;Debug&lt;/strong&gt; action from before is used to debug a Node.js component, but this time it uses the JavaScript debugger, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_702737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://raw.githubusercontent.com/wiki/redhat-developer/intellij-openshift-connector/nodejs-debug-intellij.gif"&gt;&lt;img aria-describedby="caption-attachment-702737" class="wp-image-702737 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/nodejs-debug-intellij-640.gif" alt="JetBrains IntelliJ animation showing a Node.js component debugging example" width="640" height="360" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-702737" class="wp-caption-text"&gt;Figure 2: Debugging a Node.js component IntelliJ.&lt;/p&gt;&lt;/div&gt; &lt;h2 id="user-content-stayconnected" class="link-header"&gt;Stay connected&lt;/h2&gt; &lt;p&gt;If you want more information about this new feature, &lt;a href="https://github.com/redhat-developer/intellij-openshift-connector/wiki/How-to-debug-a-component" target="_blank" rel="noopener noreferrer"&gt;documentation&lt;/a&gt; is available, and you can also chat with the development team using &lt;a href="https://gitter.im/redhat-developer/openshift-connector" target="_blank" rel="noopener noreferrer"&gt;this Gitter channel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As always, the source code for this version is available on &lt;a href="https://github.com/redhat-developer/intellij-openshift-connector" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt; under the EPL license. We appreciate feedback and help for improving your developer experience, and if you have any issues or ideas, feel free to reach us on Gitter or open issues on GitHub.&lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#38;linkname=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F03%2Fjetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components%2F&amp;#038;title=JetBrains%20IntelliJ%20Red%20Hat%20OpenShift%20extension%20provides%20debug%20support%20for%20OpenShift%20components" data-a2a-url="https://developers.redhat.com/blog/2020/04/03/jetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components/" data-a2a-title="JetBrains IntelliJ Red Hat OpenShift extension provides debug support for OpenShift components"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/03/jetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components/"&gt;JetBrains IntelliJ Red Hat OpenShift extension provides debug support for OpenShift components&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UC2YKDJSs9M" height="1" width="1" alt=""/&gt;</content><summary>The 0.2.0 release version of the Red Hat OpenShift extension for JetBrains IntelliJ is now available. You can download the OpenShift Connector extension from the JetBrains Plugins Repository. This release provides a new OpenShift: Debug action to simplify the debugging of OpenShift Components pushed to a cluster. It is similar to features developed for Visual Studio Code and JBoss Tools for Eclips...</summary><dc:creator>Stéphane BOUCHET</dc:creator><dc:date>2020-04-03T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/03/jetbrains-intellij-red-hat-openshift-extension-provides-debug-support-for-openshift-components/</feedburner:origLink></entry></feed>
